# Kind-optimized version matching customer's core Kyverno configuration
# Based on newer chart structure with customer's critical settings preserved

# Internal settings
templating:
  enabled: false
  debug: false
  version: ~

# Global settings - minimal for Kind
global:
  image:
    registry: ~
  imagePullSecrets: []
  resyncPeriod: 15m
  crdWatcher: false
  caCertificates:
    data: ~
    volume: {}
  extraEnvVars: []
  nodeSelector: {}
  tolerations: []

# Required template configurations
customLabels: {}

# RBAC settings
rbac:
  roles:
    aggregate:
      admin: true
      view: true

# CRDs configuration - CUSTOMER'S EXACT SETTINGS
crds:
  install: true
  groups:
    kyverno:
      cleanuppolicies: true
      clustercleanuppolicies: true
      clusterpolicies: true
      globalcontextentries: true
      policies: true
      policyexceptions: true
      updaterequests: true
      validatingpolicies: true
    policies:
      validatingpolicies: true
      policyexceptions: true
      imagevalidatingpolicies: true
    # CUSTOMER'S CRITICAL CRD EXCLUSIONS - KEEP AS FALSE
    reports:
      clusterephemeralreports: false
      ephemeralreports: false
    wgpolicyk8s:
      clusterpolicyreports: false
      policyreports: false
  # CUSTOMER'S CRITICAL SETTING - EXTERNAL REPORTS SERVER
  reportsServer:
    enabled: true

# Configuration - customer's core settings
config:
  create: true
  excludeGroups:
    - system:nodes
  resourceFilters:
    - '[Event,*,*]'
    - '[*/*,kube-system,*]'
    - '[*/*,kube-public,*]'
    - '[*/*,kube-node-lease,*]'

# Features - customer's settings
features:
  admissionReports:
    enabled: true
  aggregateReports:
    enabled: true
  policyReports:
    enabled: true
  validatingAdmissionPolicyReports:
    enabled: false
  reporting:
    validate: true
    mutate: true
    mutateExisting: true
    imageVerify: true
    generate: true
  autoUpdateWebhooks:
    enabled: true
  backgroundScan:
    enabled: true
    backgroundScanWorkers: 2
    backgroundScanInterval: 1h
    skipResourceFilters: true
  configMapCaching:
    enabled: true
  controllerRuntimeMetrics:
    bindAddress: :8080
  deferredLoading:
    enabled: true
  policyExceptions:
    enabled: false
    namespace: ''
  logging:
    format: text
    verbosity: 2
  omitEvents:
    eventTypes:
      - PolicyApplied
      - PolicySkipped

# Test configuration
test:
  sleep: 20
  image:
    registry: ~
    repository: busybox
    tag: '1.35'
    pullPolicy: ~
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 64Mi

# Admission controller - Kind optimized
admissionController:
  rbac:
    create: true
  replicas: 1  # Reduced for Kind
  container:
    image:
      pullPolicy: IfNotPresent
    resources:
      limits:
        memory: 384Mi
      requests:
        cpu: 100m
        memory: 128Mi
  priorityClassName: ""  # Remove for Kind
  service:
    port: 443
    type: ClusterIP
  metricsService:
    create: true
    port: 8000
    type: ClusterIP
  serviceMonitor:
    enabled: false

# Background controller - Kind optimized
backgroundController:
  enabled: true
  rbac:
    create: true
  replicas: 1  # Reduced for Kind
  image:
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ""  # Remove for Kind
  metricsService:
    create: true
    port: 8000
    type: ClusterIP
  serviceMonitor:
    enabled: false

# Cleanup controller - Kind optimized
cleanupController:
  enabled: true
  rbac:
    create: true
  replicas: 1  # Reduced for Kind
  image:
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ""  # Remove for Kind
  service:
    port: 443
    type: ClusterIP
  metricsService:
    create: true
    port: 8000
    type: ClusterIP
  serviceMonitor:
    enabled: false

# Reports controller - CUSTOMER'S CRITICAL SETTING
reportsController:
  enabled: true
  # CRITICAL: Customer's exact sanity check setting - THE KEY BUG WE'RE TESTING
  sanityChecks: false
  rbac:
    create: true
  replicas: 1  # Reduced for Kind
  image:
    pullPolicy: IfNotPresent
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ""  # Remove for Kind
  metricsService:
    create: true
    port: 8000
    type: ClusterIP
  serviceMonitor:
    enabled: false

# Reports server - CUSTOMER'S EXACT SETTING WITH KIND OPTIMIZATIONS
reports-server:
  enabled: true  # CUSTOMER'S CRITICAL SETTING
  fipsEnabled: false
  templating:
    enabled: false
  cloudnative-pg:
    crds:
      create: false
  postgresql:
    enabled: false
  replicaCount: 1
  image:
    registry: reg.nirmata.io
    repository: nirmata/reports-server
    pullPolicy: IfNotPresent
  priorityClassName: ""  # Remove for Kind
  resources:
    limits:
      cpu: 500m      # Reduced for Kind
      memory: 512Mi  # Reduced for Kind
    requests:
      cpu: 100m      # Reduced for Kind
      memory: 128Mi  # Reduced for Kind
  config:
    etcd:
      enabled: true
      storage: 1Gi     # Reduced for Kind
      quotaBackendBytes: 1073741824  # 1GB for Kind
    db:
      host: reports-server-cluster-rw.reports-server
      name: reportsdb
      user: app
      password: password
      sslmode: disable
  controllerRuntimeMetrics:
    bindAddress: :8080

# Disable resource-intensive features for Kind
grafana:
  enabled: false

networkPolicy:
  enabled: false 